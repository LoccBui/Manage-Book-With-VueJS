<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.26.1/axios.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <title></title>
</head>

<body class="mainBody">

    @*<div class="youtube-video" id="player"></div>*@
    <div id="login" class="container" style="margin-top: 30px">
        <div class="row">
            <div id="loginform" class="col-md-5 inputField">
                <input class="form-control" v-model="userName" placeholder="Tài khoản" type="text" required><br>
                <input class="form-control" style="display: none" v-model="fullName" id="fullName" placeholder="Họ và tên" type="text" required><br>
                <input class="form-control" v-model="password" placeholder="Mật khẩu" type="password" required><br>
                <input class="form-control" style="display: none" v-model="repassword" placeholder="Nhập lại mật khẩu" type="password" id="repassword" required><br>
                <label style="color: orange" class="login-log" id="login-log"></label><br>
                <img id="loadingGif" src="https://tanmydesign.com/images/loader.gif" style="display:none; position: relative; top: 0; left: 0; width:20px; height:20px" /><br />
                <button style="outline: none; box-shadow: none;" class="btn btn-primary" id="btnSubmit" v-on:click="login()">Đăng nhập</button>
                <button style="outline: none; box-shadow: none; color: #b5daff; text-decoration: none " class="btn btn-link" id="btnChange" v-on:click="changeLogAndRe()">Đăng ký</button>
                <button style="outline: none; box-shadow: none; color: #b5daff; text-decoration: none " class="btn btn-link" v-on:click="getAllAccount(true)">Xem tất cả account</button>
            </div>
            <div id="profile" class="profile" style="display:none">
                <img src="https://cdn1.iconfinder.com/data/icons/app-user-interface-glyph/64/user_man_user_interface_app_person-512.png" class="profile-img" alt="lỗi" style="height: 50px; width: 50px;">
                <div class="profile-body">
                    <h5 class="profile-title" id="profile-title" style="color: white">Xin chào x</h5>
                    <p class="profile-text" style="color: white">Chào mừng đến với NMIX!!!!</p>
                    <p id="profile-time" class="profile-text2" style="color: white"><small class="text-muted">Last updated 3 mins ago</small></p>
                </div>
                <button style="outline: none; box-shadow: none;" class="btn btn-primary" v-on:click="login()">Đăng xuất</button>
            </div>
            @*<div class="col-xs-pull-8">
                    <iframe class="apple-music" allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="175" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/vn/album/o-o/1609765517?i=1609765519"></iframe>
                    <iframe class="apple-music" allow="autoplay *; encrypted-media *; fullscreen *" frameborder="0" height="175" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/vn/album/next-level/1567326687?i=1567326688"></iframe>

                </div>*@
        </div>
        <div id="accounts" class="container" style="display: none">
            <h3 class="p-3 text-center" style="color: white">Tất cả tài khoản</h3>
            <table class="table table-striped table-bordered" style="background-color: white; border-radius: 10px">
                <thead style="border-radius: 10px ">
                    <tr>
                        <th>Tên tài khoản</th>
                        <th>Họ tên</th>
                        <th>Mật khẩu</th>
                        <th>Tùy chọn</th>
                    </tr>
                </thead>
                <tbody style="border-radius: 10px ">
                    <tr v-for="user in users" :key="user.id">
                        <td>
                            <b style="color: brown">{{user.userName}}</b>
                        </td>

                        <td>
                            <input class="form-control" v-model="user.fullName" placeholder="Họ tên" type="text" required>
                        </td>

                        <td>
                            <input class="form-control" v-model="user.password" placeholder="Mật khẩu" type="text" required>
                        </td>
                        <td>
                            <button v-on:click="Update(user)" style="outline: none; box-shadow: none;" class="btn btn-primary">Cập nhật</button>
                            <button v-on:click="Delete(user)" style="outline: none; box-shadow: none;" class="btn btn-primary">Xóa</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>
<script>
    Vue.prototype.$axios = axios;

    var login = new Vue({
        el: '#login',
        data: {
            userName: '',
            fullName: '',
            password: '',
            repassword: '',
            isLogged: false,
            users: []
        },
        
        methods: {

            Update(user) {
                console.log(user.fullName + " " + user.password);
                if (confirm("Cập nhật à?")) {

                    if (user.userName == 'nvh2001') {
                        alert("Tài khoản TỐI CAO - không được cập nhật");
                        return;
                    }
                    axios.post('http://localhost:59357/accountupdate',
                        {
                            userName: user.userName,
                            fullName: user.fullName,
                            password: user.password
                        },
                        {
                            headers: {
                                'Content-type': 'application/json',
                            }
                        }).then(response => {
                            alert("success " + response.data);
                            this.getAllAccount(false);
                        });
                }
            },
            Delete(user) {
                if (confirm("Xóa à?")) {

                    if (user.userName == 'nvh2001') {
                        alert("Tài khoản TỐI CAO - không được xóa");
                        return;
                    }
                    axios.post('http://localhost:59357/accountdelete',
                        {
                            userName: user.userName
                        },
                        {
                            headers: {
                                'Content-type': 'application/json',
                            }
                        }).then(response => {
                            //alert("success " + response.data);
                            this.getAllAccount(false);
                        });
                }
            },
            login() {

                if (this.isLogged === true) {
                    loginform.style.display = 'block';
                    profile.style.display = 'none';
                    this.isLogged = false;
                    this.password = '';
                    this.repassword = '';
                    return;
                }
                if (this.userName < 1 || this.password < 1) {
                    return;
                }
                else {
                    const buttonSubmit = document.getElementById('btnSubmit');
                    const loginform = document.getElementById('loginform');
                    const profile = document.getElementById('profile');
                    const profileTitle = document.getElementById('profile-title');
                    const profileTime = document.getElementById('profile-time');
                    const loadingGif = document.getElementById('loadingGif');
                    if (buttonSubmit.textContent == "Đăng nhập") {
                        $(".login-log").empty();
                        loadingGif.style.display = 'block';
                        //loadingGif.style.display = 'none';
                        setTimeout(() => {
                        }, 1000);

                        axios.post('http://localhost:59357/login',
                            {
                                userName: this.userName,
                                password: this.password
                            },
                            {
                                headers: {
                                    'Content-type': 'application/json',
                                }
                            }).then((response) => {
                                setTimeout(() => {
                                    loadingGif.style.display = 'none';
                                    if (response.data == "false") {

                                        $(".login-log").empty().append("Sai tên tài khoản hoặc mật khẩu!");
                                    }
                                    else {
                                        this.isLogged = true;
                                        loginform.style.display = 'none';
                                        profile.style.display = 'block';
                                        profileTitle.textContent = "Xin chào, " + response.data;
                                        var current = new Date();
                                        profileTime.textContent = current;
                                        //$(".login-log").empty().append("Xin chào, " + response.data);
                                        //window.location.href = 'https://youtu.be/3GWscde8rM8?t=181';
                                    }
                                }, 1000);

                            }).catch(error => {
                                console.log('error: ' + error);
                            });
                    }
                    else if (buttonSubmit.textContent == "Đăng ký") {
                        if (this.fullName < 1) {
                            $(".login-log").empty().append("Tên không được để trống!");
                            return;
                        }
                        if (this.password != this.repassword) {
                            $(".login-log").empty().append("Mật khẩu lần 2 phải giống mật khẩu lần 1 nha!");
                            return;
                        }
                        loadingGif.style.display = 'block';
                        //loadingGif.style.display = 'none';
                        axios.post('http://localhost:59357/register',
                            {
                                userName: this.userName,
                                password: this.password,
                                fullName: this.fullName
                            },
                            {
                                headers: {
                                    'Content-type': 'application/json',
                                }
                            }).then((response) => {
                                setTimeout(() => {
                                    loadingGif.style.display = 'none'
                                    //console.log(response.data);
                                    if (response.data == "false") {
                                        $(".login-log").empty().append("Đăng ký thất bại! tên tài khoản đã tồn tại!");
                                    }
                                    else {
                                        $(".login-log").empty().append(response.data);
                                        if (document.getElementById('accounts').style.display == 'block') {
                                            this.getAllAccount(false);
                                        }
                                        
                                    }
                                }, 2000);
                            }).catch(error => {
                                console.log('error: ' + error);
                            });
                    }

                }
            },

            getAllAccount(hide) {
                
                axios.get('http://localhost:59357/getallaccount')
                    .then((response) => {
                        const loginLog = document.getElementById('accounts');
                        if (loginLog.style.display == 'none') {
                            loadingGif.style.display = 'block';
                            setTimeout(() => {
                                loadingGif.style.display = 'none'
                                loginLog.style.display = 'block';
                                this.users = response.data;

                                
                            }, 2000);
                        }
                        else {
                            
                            if (loginLog.style.display == 'block' && hide == true) {
                                loginLog.style.display = 'none';
                            }
                            else {
                                this.users = response.data;
                            }
                        }
                        
                        
                    }).catch(error => {
                        console.log('error: ' + error);
                    });
            },
            changeLogAndRe() {
                const inputRepwd = document.getElementById('repassword');
                const inputFullName = document.getElementById('fullName');
                const buttonSubmit = document.getElementById('btnSubmit');
                const buttonChange = document.getElementById('btnChange');
                if (inputRepwd.style.display === 'none') {
                    inputRepwd.style.display = 'block';
                    buttonSubmit.textContent = "Đăng ký";

                    buttonChange.textContent = "Đăng nhập";
                    inputFullName.style.display = 'block';

                } else {
                    inputRepwd.style.display = 'none';
                    buttonSubmit.textContent = "Đăng nhập";

                    buttonChange.textContent = "Đăng ký";
                    inputFullName.style.display = 'none';
                }
            },
        }
    });
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {

            videoId: 'H69tJmsgd9I',
            fitToBackground: true,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            },
            playerVars: {
                'autoplay': 1,
                'vq': 'hd1080',
                'controls': 0,
                'disablekb': 1,
                'fs': 0,
                'loop': 1,
                'rel': 0,
                'showinfo': 0,
                'modestbranding': 1, // Hide the Youtube Logo
                'mute': 1,
                'autohide': 1,
                'start': 0,
                'end': 9
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
        player.mute();
        player.setLoop(true);
        player.setPlaybackQuality('hd1080');
        //setTimeout(stopVideo, 202000);
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {

        if (event.data == YT.PlayerState.PLAYING && !done) {
            //setTimeout(stopVideo, 202000);
            //done = true;
        }
        if (event.data == YT.PlayerState.ENDED) {

            player.seekTo(0);
            $('#video-front').show();
            $('.video-container').hide();

        }

    }

    function stopVideo() {
        player.stopVideo();
    }


</script>
